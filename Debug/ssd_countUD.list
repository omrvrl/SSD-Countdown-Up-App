
ssd_countUD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001310  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080014e0  080014e0  000114e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001510  08001510  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001510  08001510  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001510  08001510  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001510  08001510  00011510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001514  08001514  00011514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001524  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001524  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000253d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d52  00000000  00000000  00022572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c0  00000000  00000000  000232c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000338  00000000  00000000  00023688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ee8c  00000000  00000000  000239c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004485  00000000  00000000  0003284c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005abd0  00000000  00000000  00036cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000918a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cc8  00000000  00000000  000918f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080014c8 	.word	0x080014c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	080014c8 	.word	0x080014c8

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000214:	f000 fc10 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000218:	f000 f80f 	bl	800023a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021c:	f000 f848 	bl	80002b0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  ssd_init();
 8000220:	f000 f8d8 	bl	80003d4 <ssd_init>
  number_off();
 8000224:	f000 fa88 	bl	8000738 <number_off>
  count_down(5000);
 8000228:	f241 3088 	movw	r0, #5000	; 0x1388
 800022c:	f000 faac 	bl	8000788 <count_down>
  count_up(5000);
 8000230:	f241 3088 	movw	r0, #5000	; 0x1388
 8000234:	f000 fb54 	bl	80008e0 <count_up>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x28>

0800023a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	b090      	sub	sp, #64	; 0x40
 800023e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	f107 0318 	add.w	r3, r7, #24
 8000244:	2228      	movs	r2, #40	; 0x28
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f001 f935 	bl	80014b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025c:	2302      	movs	r3, #2
 800025e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000260:	2301      	movs	r3, #1
 8000262:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000264:	2310      	movs	r3, #16
 8000266:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000268:	2300      	movs	r3, #0
 800026a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0318 	add.w	r3, r7, #24
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fd43 	bl	8000cfc <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800027c:	f000 f82e 	bl	80002dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000284:	2300      	movs	r3, #0
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2100      	movs	r1, #0
 8000298:	4618      	mov	r0, r3
 800029a:	f000 ffb1 	bl	8001200 <HAL_RCC_ClockConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002a4:	f000 f81a 	bl	80002dc <Error_Handler>
  }
}
 80002a8:	bf00      	nop
 80002aa:	3740      	adds	r7, #64	; 0x40
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <MX_GPIO_Init+0x28>)
 80002b8:	699b      	ldr	r3, [r3, #24]
 80002ba:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <MX_GPIO_Init+0x28>)
 80002bc:	f043 0320 	orr.w	r3, r3, #32
 80002c0:	6193      	str	r3, [r2, #24]
 80002c2:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <MX_GPIO_Init+0x28>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	f003 0320 	and.w	r3, r3, #32
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]

}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	40021000 	.word	0x40021000

080002dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e0:	b672      	cpsid	i
}
 80002e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002e4:	e7fe      	b.n	80002e4 <Error_Handler+0x8>
	...

080002e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <HAL_MspInit+0x40>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <HAL_MspInit+0x40>)
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	6193      	str	r3, [r2, #24]
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <HAL_MspInit+0x40>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <HAL_MspInit+0x40>)
 8000308:	69db      	ldr	r3, [r3, #28]
 800030a:	4a07      	ldr	r2, [pc, #28]	; (8000328 <HAL_MspInit+0x40>)
 800030c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000310:	61d3      	str	r3, [r2, #28]
 8000312:	4b05      	ldr	r3, [pc, #20]	; (8000328 <HAL_MspInit+0x40>)
 8000314:	69db      	ldr	r3, [r3, #28]
 8000316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800031a:	603b      	str	r3, [r7, #0]
 800031c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr
 8000328:	40021000 	.word	0x40021000

0800032c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000330:	e7fe      	b.n	8000330 <NMI_Handler+0x4>

08000332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000336:	e7fe      	b.n	8000336 <HardFault_Handler+0x4>

08000338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800033c:	e7fe      	b.n	800033c <MemManage_Handler+0x4>

0800033e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000342:	e7fe      	b.n	8000342 <BusFault_Handler+0x4>

08000344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000348:	e7fe      	b.n	8000348 <UsageFault_Handler+0x4>

0800034a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800034e:	bf00      	nop
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr

08000356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800035a:	bf00      	nop
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr

08000362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000366:	bf00      	nop
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr

0800036e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800036e:	b580      	push	{r7, lr}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000372:	f000 fb9f 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}

0800037a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr
	...

08000388 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000388:	480c      	ldr	r0, [pc, #48]	; (80003bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800038a:	490d      	ldr	r1, [pc, #52]	; (80003c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800038c:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000390:	e002      	b.n	8000398 <LoopCopyDataInit>

08000392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000396:	3304      	adds	r3, #4

08000398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800039c:	d3f9      	bcc.n	8000392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039e:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003a0:	4c0a      	ldr	r4, [pc, #40]	; (80003cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a4:	e001      	b.n	80003aa <LoopFillZerobss>

080003a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a8:	3204      	adds	r2, #4

080003aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ac:	d3fb      	bcc.n	80003a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003ae:	f7ff ffe4 	bl	800037a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003b2:	f001 f85d 	bl	8001470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003b6:	f7ff ff2b 	bl	8000210 <main>
  bx lr
 80003ba:	4770      	bx	lr
  ldr r0, =_sdata
 80003bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003c4:	08001518 	.word	0x08001518
  ldr r2, =_sbss
 80003c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003cc:	2000002c 	.word	0x2000002c

080003d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d0:	e7fe      	b.n	80003d0 <ADC1_IRQHandler>
	...

080003d4 <ssd_init>:
	for(int i=0;i<time;i++){
		HAL_Delay(500);
	}
}

void ssd_init(void){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

	number_off();
 80003d8:	f000 f9ae 	bl	8000738 <number_off>
	RCC->APB2ENR |= (1<<2);
 80003dc:	4b63      	ldr	r3, [pc, #396]	; (800056c <ssd_init+0x198>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a62      	ldr	r2, [pc, #392]	; (800056c <ssd_init+0x198>)
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	6193      	str	r3, [r2, #24]

	/*PİN0*/
	GPIOA->CRL &= ~(1<<1);
 80003e8:	4b61      	ldr	r3, [pc, #388]	; (8000570 <ssd_init+0x19c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a60      	ldr	r2, [pc, #384]	; (8000570 <ssd_init+0x19c>)
 80003ee:	f023 0302 	bic.w	r3, r3, #2
 80003f2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1<<0);
 80003f4:	4b5e      	ldr	r3, [pc, #376]	; (8000570 <ssd_init+0x19c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a5d      	ldr	r2, [pc, #372]	; (8000570 <ssd_init+0x19c>)
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1<<3);
 8000400:	4b5b      	ldr	r3, [pc, #364]	; (8000570 <ssd_init+0x19c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a5a      	ldr	r2, [pc, #360]	; (8000570 <ssd_init+0x19c>)
 8000406:	f023 0308 	bic.w	r3, r3, #8
 800040a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1<<2);
 800040c:	4b58      	ldr	r3, [pc, #352]	; (8000570 <ssd_init+0x19c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a57      	ldr	r2, [pc, #348]	; (8000570 <ssd_init+0x19c>)
 8000412:	f023 0304 	bic.w	r3, r3, #4
 8000416:	6013      	str	r3, [r2, #0]

	/*PIN1*/
	GPIOA->CRL &= ~(1<<5);
 8000418:	4b55      	ldr	r3, [pc, #340]	; (8000570 <ssd_init+0x19c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a54      	ldr	r2, [pc, #336]	; (8000570 <ssd_init+0x19c>)
 800041e:	f023 0320 	bic.w	r3, r3, #32
 8000422:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1<<4);
 8000424:	4b52      	ldr	r3, [pc, #328]	; (8000570 <ssd_init+0x19c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a51      	ldr	r2, [pc, #324]	; (8000570 <ssd_init+0x19c>)
 800042a:	f043 0310 	orr.w	r3, r3, #16
 800042e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1<<7);
 8000430:	4b4f      	ldr	r3, [pc, #316]	; (8000570 <ssd_init+0x19c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a4e      	ldr	r2, [pc, #312]	; (8000570 <ssd_init+0x19c>)
 8000436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800043a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1<<6);
 800043c:	4b4c      	ldr	r3, [pc, #304]	; (8000570 <ssd_init+0x19c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a4b      	ldr	r2, [pc, #300]	; (8000570 <ssd_init+0x19c>)
 8000442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000446:	6013      	str	r3, [r2, #0]

	/*PIN2*/
	GPIOA->CRL &= ~(1<<9);
 8000448:	4b49      	ldr	r3, [pc, #292]	; (8000570 <ssd_init+0x19c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a48      	ldr	r2, [pc, #288]	; (8000570 <ssd_init+0x19c>)
 800044e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000452:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1<<8);
 8000454:	4b46      	ldr	r3, [pc, #280]	; (8000570 <ssd_init+0x19c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a45      	ldr	r2, [pc, #276]	; (8000570 <ssd_init+0x19c>)
 800045a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800045e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1<<11);
 8000460:	4b43      	ldr	r3, [pc, #268]	; (8000570 <ssd_init+0x19c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a42      	ldr	r2, [pc, #264]	; (8000570 <ssd_init+0x19c>)
 8000466:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800046a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1<<10);
 800046c:	4b40      	ldr	r3, [pc, #256]	; (8000570 <ssd_init+0x19c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a3f      	ldr	r2, [pc, #252]	; (8000570 <ssd_init+0x19c>)
 8000472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000476:	6013      	str	r3, [r2, #0]

	/*PIN4*/
	GPIOA->CRL &= ~(1<<13);
 8000478:	4b3d      	ldr	r3, [pc, #244]	; (8000570 <ssd_init+0x19c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a3c      	ldr	r2, [pc, #240]	; (8000570 <ssd_init+0x19c>)
 800047e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000482:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1<<12);
 8000484:	4b3a      	ldr	r3, [pc, #232]	; (8000570 <ssd_init+0x19c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a39      	ldr	r2, [pc, #228]	; (8000570 <ssd_init+0x19c>)
 800048a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800048e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1<<15);
 8000490:	4b37      	ldr	r3, [pc, #220]	; (8000570 <ssd_init+0x19c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a36      	ldr	r2, [pc, #216]	; (8000570 <ssd_init+0x19c>)
 8000496:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800049a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1<<14);
 800049c:	4b34      	ldr	r3, [pc, #208]	; (8000570 <ssd_init+0x19c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a33      	ldr	r2, [pc, #204]	; (8000570 <ssd_init+0x19c>)
 80004a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80004a6:	6013      	str	r3, [r2, #0]

	/*PİN8*/
	GPIOA->CRH &= ~(1<<1);
 80004a8:	4b31      	ldr	r3, [pc, #196]	; (8000570 <ssd_init+0x19c>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	4a30      	ldr	r2, [pc, #192]	; (8000570 <ssd_init+0x19c>)
 80004ae:	f023 0302 	bic.w	r3, r3, #2
 80004b2:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (1<<0);
 80004b4:	4b2e      	ldr	r3, [pc, #184]	; (8000570 <ssd_init+0x19c>)
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	4a2d      	ldr	r2, [pc, #180]	; (8000570 <ssd_init+0x19c>)
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(1<<3);
 80004c0:	4b2b      	ldr	r3, [pc, #172]	; (8000570 <ssd_init+0x19c>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	4a2a      	ldr	r2, [pc, #168]	; (8000570 <ssd_init+0x19c>)
 80004c6:	f023 0308 	bic.w	r3, r3, #8
 80004ca:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(1<<2);
 80004cc:	4b28      	ldr	r3, [pc, #160]	; (8000570 <ssd_init+0x19c>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	4a27      	ldr	r2, [pc, #156]	; (8000570 <ssd_init+0x19c>)
 80004d2:	f023 0304 	bic.w	r3, r3, #4
 80004d6:	6053      	str	r3, [r2, #4]

	/*PIN9*/
	GPIOA->CRH &= ~(1<<5);
 80004d8:	4b25      	ldr	r3, [pc, #148]	; (8000570 <ssd_init+0x19c>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	4a24      	ldr	r2, [pc, #144]	; (8000570 <ssd_init+0x19c>)
 80004de:	f023 0320 	bic.w	r3, r3, #32
 80004e2:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (1<<4);
 80004e4:	4b22      	ldr	r3, [pc, #136]	; (8000570 <ssd_init+0x19c>)
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	4a21      	ldr	r2, [pc, #132]	; (8000570 <ssd_init+0x19c>)
 80004ea:	f043 0310 	orr.w	r3, r3, #16
 80004ee:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(1<<7);
 80004f0:	4b1f      	ldr	r3, [pc, #124]	; (8000570 <ssd_init+0x19c>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	4a1e      	ldr	r2, [pc, #120]	; (8000570 <ssd_init+0x19c>)
 80004f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004fa:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(1<<6);
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <ssd_init+0x19c>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	4a1b      	ldr	r2, [pc, #108]	; (8000570 <ssd_init+0x19c>)
 8000502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000506:	6053      	str	r3, [r2, #4]

	/*PIN10*/
	GPIOA->CRH &= ~(1<<9);
 8000508:	4b19      	ldr	r3, [pc, #100]	; (8000570 <ssd_init+0x19c>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	4a18      	ldr	r2, [pc, #96]	; (8000570 <ssd_init+0x19c>)
 800050e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000512:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (1<<8);
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <ssd_init+0x19c>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	4a15      	ldr	r2, [pc, #84]	; (8000570 <ssd_init+0x19c>)
 800051a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800051e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(1<<11);
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <ssd_init+0x19c>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	4a12      	ldr	r2, [pc, #72]	; (8000570 <ssd_init+0x19c>)
 8000526:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800052a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(1<<10);
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <ssd_init+0x19c>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <ssd_init+0x19c>)
 8000532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000536:	6053      	str	r3, [r2, #4]

	/*PIN11*/
	GPIOA->CRH &= ~(1<<13);
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <ssd_init+0x19c>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	4a0c      	ldr	r2, [pc, #48]	; (8000570 <ssd_init+0x19c>)
 800053e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000542:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (1<<12);
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <ssd_init+0x19c>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	4a09      	ldr	r2, [pc, #36]	; (8000570 <ssd_init+0x19c>)
 800054a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800054e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(1<<15);
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <ssd_init+0x19c>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <ssd_init+0x19c>)
 8000556:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800055a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(1<<14);
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <ssd_init+0x19c>)
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	4a03      	ldr	r2, [pc, #12]	; (8000570 <ssd_init+0x19c>)
 8000562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000566:	6053      	str	r3, [r2, #4]


}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021000 	.word	0x40021000
 8000570:	40010800 	.word	0x40010800

08000574 <number_on>:

void number_on(uint32_t number){
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	switch(number){
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b0b      	cmp	r3, #11
 8000580:	f200 80d2 	bhi.w	8000728 <number_on+0x1b4>
 8000584:	a201      	add	r2, pc, #4	; (adr r2, 800058c <number_on+0x18>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	080005bd 	.word	0x080005bd
 8000590:	080005e9 	.word	0x080005e9
 8000594:	080005f9 	.word	0x080005f9
 8000598:	0800061d 	.word	0x0800061d
 800059c:	08000641 	.word	0x08000641
 80005a0:	0800065d 	.word	0x0800065d
 80005a4:	08000681 	.word	0x08000681
 80005a8:	080006ad 	.word	0x080006ad
 80005ac:	080006c3 	.word	0x080006c3
 80005b0:	080006f5 	.word	0x080006f5
 80005b4:	08000729 	.word	0x08000729
 80005b8:	0800071f 	.word	0x0800071f
	case 0:
		GPIOA->BSRR = (1<<8);
 80005bc:	4b5d      	ldr	r3, [pc, #372]	; (8000734 <number_on+0x1c0>)
 80005be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c2:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<9);
 80005c4:	4b5b      	ldr	r3, [pc, #364]	; (8000734 <number_on+0x1c0>)
 80005c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ca:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<10);
 80005cc:	4b59      	ldr	r3, [pc, #356]	; (8000734 <number_on+0x1c0>)
 80005ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005d2:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<1);
 80005d4:	4b57      	ldr	r3, [pc, #348]	; (8000734 <number_on+0x1c0>)
 80005d6:	2202      	movs	r2, #2
 80005d8:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<2);
 80005da:	4b56      	ldr	r3, [pc, #344]	; (8000734 <number_on+0x1c0>)
 80005dc:	2204      	movs	r2, #4
 80005de:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<0);
 80005e0:	4b54      	ldr	r3, [pc, #336]	; (8000734 <number_on+0x1c0>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	611a      	str	r2, [r3, #16]
		break;
 80005e6:	e09f      	b.n	8000728 <number_on+0x1b4>
	case 1:

		GPIOA->BSRR = (1<<8);
 80005e8:	4b52      	ldr	r3, [pc, #328]	; (8000734 <number_on+0x1c0>)
 80005ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ee:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<2);
 80005f0:	4b50      	ldr	r3, [pc, #320]	; (8000734 <number_on+0x1c0>)
 80005f2:	2204      	movs	r2, #4
 80005f4:	611a      	str	r2, [r3, #16]
		break;
 80005f6:	e097      	b.n	8000728 <number_on+0x1b4>

	case 2:
		GPIOA->BSRR = (1<<8);
 80005f8:	4b4e      	ldr	r3, [pc, #312]	; (8000734 <number_on+0x1c0>)
 80005fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005fe:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<9);
 8000600:	4b4c      	ldr	r3, [pc, #304]	; (8000734 <number_on+0x1c0>)
 8000602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000606:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<0);
 8000608:	4b4a      	ldr	r3, [pc, #296]	; (8000734 <number_on+0x1c0>)
 800060a:	2201      	movs	r2, #1
 800060c:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<1);
 800060e:	4b49      	ldr	r3, [pc, #292]	; (8000734 <number_on+0x1c0>)
 8000610:	2202      	movs	r2, #2
 8000612:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<3);
 8000614:	4b47      	ldr	r3, [pc, #284]	; (8000734 <number_on+0x1c0>)
 8000616:	2208      	movs	r2, #8
 8000618:	611a      	str	r2, [r3, #16]
		break;
 800061a:	e085      	b.n	8000728 <number_on+0x1b4>
	case 3:
		GPIOA->BSRR = (1<<9);
 800061c:	4b45      	ldr	r3, [pc, #276]	; (8000734 <number_on+0x1c0>)
 800061e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000622:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<10);
 8000624:	4b43      	ldr	r3, [pc, #268]	; (8000734 <number_on+0x1c0>)
 8000626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800062a:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<0);
 800062c:	4b41      	ldr	r3, [pc, #260]	; (8000734 <number_on+0x1c0>)
 800062e:	2201      	movs	r2, #1
 8000630:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<1);
 8000632:	4b40      	ldr	r3, [pc, #256]	; (8000734 <number_on+0x1c0>)
 8000634:	2202      	movs	r2, #2
 8000636:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<3);
 8000638:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <number_on+0x1c0>)
 800063a:	2208      	movs	r2, #8
 800063c:	611a      	str	r2, [r3, #16]
		break;
 800063e:	e073      	b.n	8000728 <number_on+0x1b4>
	case 4:

		GPIOA->BSRR = (1<<10);
 8000640:	4b3c      	ldr	r3, [pc, #240]	; (8000734 <number_on+0x1c0>)
 8000642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000646:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<0);
 8000648:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <number_on+0x1c0>)
 800064a:	2201      	movs	r2, #1
 800064c:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<2);
 800064e:	4b39      	ldr	r3, [pc, #228]	; (8000734 <number_on+0x1c0>)
 8000650:	2204      	movs	r2, #4
 8000652:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<3);
 8000654:	4b37      	ldr	r3, [pc, #220]	; (8000734 <number_on+0x1c0>)
 8000656:	2208      	movs	r2, #8
 8000658:	611a      	str	r2, [r3, #16]
		break;
 800065a:	e065      	b.n	8000728 <number_on+0x1b4>
	case 5:
		GPIOA->BSRR = (1<<9);
 800065c:	4b35      	ldr	r3, [pc, #212]	; (8000734 <number_on+0x1c0>)
 800065e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000662:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<10);
 8000664:	4b33      	ldr	r3, [pc, #204]	; (8000734 <number_on+0x1c0>)
 8000666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800066a:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<1);
 800066c:	4b31      	ldr	r3, [pc, #196]	; (8000734 <number_on+0x1c0>)
 800066e:	2202      	movs	r2, #2
 8000670:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<2);
 8000672:	4b30      	ldr	r3, [pc, #192]	; (8000734 <number_on+0x1c0>)
 8000674:	2204      	movs	r2, #4
 8000676:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<3);
 8000678:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <number_on+0x1c0>)
 800067a:	2208      	movs	r2, #8
 800067c:	611a      	str	r2, [r3, #16]
		break;
 800067e:	e053      	b.n	8000728 <number_on+0x1b4>
	case 6:
		GPIOA->BSRR = (1<<8);
 8000680:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <number_on+0x1c0>)
 8000682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000686:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<9);
 8000688:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <number_on+0x1c0>)
 800068a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800068e:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<10);
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <number_on+0x1c0>)
 8000692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000696:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<1);
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <number_on+0x1c0>)
 800069a:	2202      	movs	r2, #2
 800069c:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<2);
 800069e:	4b25      	ldr	r3, [pc, #148]	; (8000734 <number_on+0x1c0>)
 80006a0:	2204      	movs	r2, #4
 80006a2:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<3);
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <number_on+0x1c0>)
 80006a6:	2208      	movs	r2, #8
 80006a8:	611a      	str	r2, [r3, #16]
		break;
 80006aa:	e03d      	b.n	8000728 <number_on+0x1b4>
	case 7:

		GPIOA->BSRR = (1<<10);
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <number_on+0x1c0>)
 80006ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006b2:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<0);
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <number_on+0x1c0>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<1);
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <number_on+0x1c0>)
 80006bc:	2202      	movs	r2, #2
 80006be:	611a      	str	r2, [r3, #16]
		break;
 80006c0:	e032      	b.n	8000728 <number_on+0x1b4>

	case 8:
		GPIOA->BSRR = (1<<8);
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <number_on+0x1c0>)
 80006c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006c8:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<9);
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <number_on+0x1c0>)
 80006cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d0:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<10);
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <number_on+0x1c0>)
 80006d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d8:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<0);
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <number_on+0x1c0>)
 80006dc:	2201      	movs	r2, #1
 80006de:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<1);
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <number_on+0x1c0>)
 80006e2:	2202      	movs	r2, #2
 80006e4:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<2);
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <number_on+0x1c0>)
 80006e8:	2204      	movs	r2, #4
 80006ea:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<3);
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <number_on+0x1c0>)
 80006ee:	2208      	movs	r2, #8
 80006f0:	611a      	str	r2, [r3, #16]
		break;
 80006f2:	e019      	b.n	8000728 <number_on+0x1b4>
	case 9:
		GPIOA->BSRR = (1<<9);
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <number_on+0x1c0>)
 80006f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006fa:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<10);
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <number_on+0x1c0>)
 80006fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000702:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<0);
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <number_on+0x1c0>)
 8000706:	2201      	movs	r2, #1
 8000708:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<1);
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <number_on+0x1c0>)
 800070c:	2202      	movs	r2, #2
 800070e:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<2);
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <number_on+0x1c0>)
 8000712:	2204      	movs	r2, #4
 8000714:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = (1<<3);
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <number_on+0x1c0>)
 8000718:	2208      	movs	r2, #8
 800071a:	611a      	str	r2, [r3, #16]
		break;
 800071c:	e004      	b.n	8000728 <number_on+0x1b4>

	case 11:
		GPIOA->BSRR = (1<<11);
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <number_on+0x1c0>)
 8000720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000724:	611a      	str	r2, [r3, #16]
		break;
 8000726:	bf00      	nop
	}
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40010800 	.word	0x40010800

08000738 <number_off>:

void number_off(){
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

	GPIOA->BSRR = (1<<24);
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <number_off+0x4c>)
 800073e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000742:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = (1<<25);
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <number_off+0x4c>)
 8000746:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800074a:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = (1<<26);
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <number_off+0x4c>)
 800074e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000752:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = (1<<27);
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <number_off+0x4c>)
 8000756:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800075a:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = (1<<16);
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <number_off+0x4c>)
 800075e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000762:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = (1<<17);
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <number_off+0x4c>)
 8000766:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800076a:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = (1<<18);
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <number_off+0x4c>)
 800076e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000772:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = (1<<19);
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <number_off+0x4c>)
 8000776:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800077a:	611a      	str	r2, [r3, #16]

	/*RCC->APB2RSTR = (1<<2);*/
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40010800 	.word	0x40010800

08000788 <count_down>:

void count_down(uint32_t speed)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
		number_on(9);
 8000790:	2009      	movs	r0, #9
 8000792:	f7ff feef 	bl	8000574 <number_on>
		HAL_Delay(500);
 8000796:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800079a:	f000 f9a7 	bl	8000aec <HAL_Delay>
		number_off();
 800079e:	f7ff ffcb 	bl	8000738 <number_off>
		HAL_Delay(500);
 80007a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a6:	f000 f9a1 	bl	8000aec <HAL_Delay>
//
		number_on(8);
 80007aa:	2008      	movs	r0, #8
 80007ac:	f7ff fee2 	bl	8000574 <number_on>
		HAL_Delay(500);
 80007b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007b4:	f000 f99a 	bl	8000aec <HAL_Delay>
		number_off();
 80007b8:	f7ff ffbe 	bl	8000738 <number_off>
		HAL_Delay(500);
 80007bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c0:	f000 f994 	bl	8000aec <HAL_Delay>

		number_on(7);
 80007c4:	2007      	movs	r0, #7
 80007c6:	f7ff fed5 	bl	8000574 <number_on>
		HAL_Delay(500);
 80007ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ce:	f000 f98d 	bl	8000aec <HAL_Delay>
		number_off();
 80007d2:	f7ff ffb1 	bl	8000738 <number_off>
		HAL_Delay(500);
 80007d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007da:	f000 f987 	bl	8000aec <HAL_Delay>

		number_on(6);
 80007de:	2006      	movs	r0, #6
 80007e0:	f7ff fec8 	bl	8000574 <number_on>
		HAL_Delay(500);
 80007e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e8:	f000 f980 	bl	8000aec <HAL_Delay>
		number_off();
 80007ec:	f7ff ffa4 	bl	8000738 <number_off>
		HAL_Delay(500);
 80007f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f4:	f000 f97a 	bl	8000aec <HAL_Delay>

		number_on(5);
 80007f8:	2005      	movs	r0, #5
 80007fa:	f7ff febb 	bl	8000574 <number_on>
		HAL_Delay(500);
 80007fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000802:	f000 f973 	bl	8000aec <HAL_Delay>
		number_off();
 8000806:	f7ff ff97 	bl	8000738 <number_off>
		HAL_Delay(500);
 800080a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800080e:	f000 f96d 	bl	8000aec <HAL_Delay>

		number_on(4);
 8000812:	2004      	movs	r0, #4
 8000814:	f7ff feae 	bl	8000574 <number_on>
		HAL_Delay(500);
 8000818:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081c:	f000 f966 	bl	8000aec <HAL_Delay>
		number_off();
 8000820:	f7ff ff8a 	bl	8000738 <number_off>
		HAL_Delay(500);
 8000824:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000828:	f000 f960 	bl	8000aec <HAL_Delay>

		number_on(3);
 800082c:	2003      	movs	r0, #3
 800082e:	f7ff fea1 	bl	8000574 <number_on>
		HAL_Delay(500);
 8000832:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000836:	f000 f959 	bl	8000aec <HAL_Delay>
		number_off();
 800083a:	f7ff ff7d 	bl	8000738 <number_off>
		HAL_Delay(500);
 800083e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000842:	f000 f953 	bl	8000aec <HAL_Delay>

		number_on(2);
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff fe94 	bl	8000574 <number_on>
		HAL_Delay(500);
 800084c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000850:	f000 f94c 	bl	8000aec <HAL_Delay>
		number_off();
 8000854:	f7ff ff70 	bl	8000738 <number_off>
		HAL_Delay(500);
 8000858:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085c:	f000 f946 	bl	8000aec <HAL_Delay>

		number_on(1);
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff fe87 	bl	8000574 <number_on>
		HAL_Delay(500);
 8000866:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800086a:	f000 f93f 	bl	8000aec <HAL_Delay>
		number_off();
 800086e:	f7ff ff63 	bl	8000738 <number_off>
		HAL_Delay(500);
 8000872:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000876:	f000 f939 	bl	8000aec <HAL_Delay>

		number_on(0);
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff fe7a 	bl	8000574 <number_on>
		HAL_Delay(500);
 8000880:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000884:	f000 f932 	bl	8000aec <HAL_Delay>
		number_off();
 8000888:	f7ff ff56 	bl	8000738 <number_off>
		HAL_Delay(500);
 800088c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000890:	f000 f92c 	bl	8000aec <HAL_Delay>

		number_on(11);
 8000894:	200b      	movs	r0, #11
 8000896:	f7ff fe6d 	bl	8000574 <number_on>
		HAL_Delay(200);
 800089a:	20c8      	movs	r0, #200	; 0xc8
 800089c:	f000 f926 	bl	8000aec <HAL_Delay>
		number_off();
 80008a0:	f7ff ff4a 	bl	8000738 <number_off>
		HAL_Delay(200);
 80008a4:	20c8      	movs	r0, #200	; 0xc8
 80008a6:	f000 f921 	bl	8000aec <HAL_Delay>
		number_on(11);
 80008aa:	200b      	movs	r0, #11
 80008ac:	f7ff fe62 	bl	8000574 <number_on>
		HAL_Delay(200);
 80008b0:	20c8      	movs	r0, #200	; 0xc8
 80008b2:	f000 f91b 	bl	8000aec <HAL_Delay>
		number_off();
 80008b6:	f7ff ff3f 	bl	8000738 <number_off>
		HAL_Delay(200);
 80008ba:	20c8      	movs	r0, #200	; 0xc8
 80008bc:	f000 f916 	bl	8000aec <HAL_Delay>
		number_on(11);
 80008c0:	200b      	movs	r0, #11
 80008c2:	f7ff fe57 	bl	8000574 <number_on>
		HAL_Delay(200);
 80008c6:	20c8      	movs	r0, #200	; 0xc8
 80008c8:	f000 f910 	bl	8000aec <HAL_Delay>
		number_off();
 80008cc:	f7ff ff34 	bl	8000738 <number_off>
		HAL_Delay(500);
 80008d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008d4:	f000 f90a 	bl	8000aec <HAL_Delay>


}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <count_up>:

void count_up(uint32_t speed)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

		number_on(0);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff fe43 	bl	8000574 <number_on>
		HAL_Delay(500);
 80008ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008f2:	f000 f8fb 	bl	8000aec <HAL_Delay>
		number_off();
 80008f6:	f7ff ff1f 	bl	8000738 <number_off>
		HAL_Delay(500);
 80008fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fe:	f000 f8f5 	bl	8000aec <HAL_Delay>
//
		number_on(1);
 8000902:	2001      	movs	r0, #1
 8000904:	f7ff fe36 	bl	8000574 <number_on>
		HAL_Delay(500);
 8000908:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800090c:	f000 f8ee 	bl	8000aec <HAL_Delay>
		number_off();
 8000910:	f7ff ff12 	bl	8000738 <number_off>
		HAL_Delay(500);
 8000914:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000918:	f000 f8e8 	bl	8000aec <HAL_Delay>

		number_on(2);
 800091c:	2002      	movs	r0, #2
 800091e:	f7ff fe29 	bl	8000574 <number_on>
		HAL_Delay(500);
 8000922:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000926:	f000 f8e1 	bl	8000aec <HAL_Delay>
		number_off();
 800092a:	f7ff ff05 	bl	8000738 <number_off>
		HAL_Delay(500);
 800092e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000932:	f000 f8db 	bl	8000aec <HAL_Delay>

		number_on(3);
 8000936:	2003      	movs	r0, #3
 8000938:	f7ff fe1c 	bl	8000574 <number_on>
		HAL_Delay(500);
 800093c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000940:	f000 f8d4 	bl	8000aec <HAL_Delay>
		number_off();
 8000944:	f7ff fef8 	bl	8000738 <number_off>
		HAL_Delay(500);
 8000948:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800094c:	f000 f8ce 	bl	8000aec <HAL_Delay>

		number_on(4);
 8000950:	2004      	movs	r0, #4
 8000952:	f7ff fe0f 	bl	8000574 <number_on>
		HAL_Delay(500);
 8000956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800095a:	f000 f8c7 	bl	8000aec <HAL_Delay>
		number_off();
 800095e:	f7ff feeb 	bl	8000738 <number_off>
		HAL_Delay(500);
 8000962:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000966:	f000 f8c1 	bl	8000aec <HAL_Delay>

		number_on(5);
 800096a:	2005      	movs	r0, #5
 800096c:	f7ff fe02 	bl	8000574 <number_on>
		HAL_Delay(500);
 8000970:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000974:	f000 f8ba 	bl	8000aec <HAL_Delay>
		number_off();
 8000978:	f7ff fede 	bl	8000738 <number_off>
		HAL_Delay(500);
 800097c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000980:	f000 f8b4 	bl	8000aec <HAL_Delay>

		number_on(6);
 8000984:	2006      	movs	r0, #6
 8000986:	f7ff fdf5 	bl	8000574 <number_on>
		HAL_Delay(500);
 800098a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800098e:	f000 f8ad 	bl	8000aec <HAL_Delay>
		number_off();
 8000992:	f7ff fed1 	bl	8000738 <number_off>
		HAL_Delay(500);
 8000996:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800099a:	f000 f8a7 	bl	8000aec <HAL_Delay>

		number_on(7);
 800099e:	2007      	movs	r0, #7
 80009a0:	f7ff fde8 	bl	8000574 <number_on>
		HAL_Delay(500);
 80009a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a8:	f000 f8a0 	bl	8000aec <HAL_Delay>
		number_off();
 80009ac:	f7ff fec4 	bl	8000738 <number_off>
		HAL_Delay(500);
 80009b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009b4:	f000 f89a 	bl	8000aec <HAL_Delay>

		number_on(8);
 80009b8:	2008      	movs	r0, #8
 80009ba:	f7ff fddb 	bl	8000574 <number_on>
		HAL_Delay(500);
 80009be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009c2:	f000 f893 	bl	8000aec <HAL_Delay>
		number_off();
 80009c6:	f7ff feb7 	bl	8000738 <number_off>
		HAL_Delay(500);
 80009ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ce:	f000 f88d 	bl	8000aec <HAL_Delay>

		number_on(9);
 80009d2:	2009      	movs	r0, #9
 80009d4:	f7ff fdce 	bl	8000574 <number_on>
		HAL_Delay(500);
 80009d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009dc:	f000 f886 	bl	8000aec <HAL_Delay>
		number_off();
 80009e0:	f7ff feaa 	bl	8000738 <number_off>
		HAL_Delay(500);
 80009e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e8:	f000 f880 	bl	8000aec <HAL_Delay>

		number_on(11);
 80009ec:	200b      	movs	r0, #11
 80009ee:	f7ff fdc1 	bl	8000574 <number_on>
		HAL_Delay(200);
 80009f2:	20c8      	movs	r0, #200	; 0xc8
 80009f4:	f000 f87a 	bl	8000aec <HAL_Delay>
		number_off();
 80009f8:	f7ff fe9e 	bl	8000738 <number_off>
		HAL_Delay(200);
 80009fc:	20c8      	movs	r0, #200	; 0xc8
 80009fe:	f000 f875 	bl	8000aec <HAL_Delay>
		number_on(11);
 8000a02:	200b      	movs	r0, #11
 8000a04:	f7ff fdb6 	bl	8000574 <number_on>
		HAL_Delay(200);
 8000a08:	20c8      	movs	r0, #200	; 0xc8
 8000a0a:	f000 f86f 	bl	8000aec <HAL_Delay>
		number_off();
 8000a0e:	f7ff fe93 	bl	8000738 <number_off>
		HAL_Delay(200);
 8000a12:	20c8      	movs	r0, #200	; 0xc8
 8000a14:	f000 f86a 	bl	8000aec <HAL_Delay>
		number_on(11);
 8000a18:	200b      	movs	r0, #11
 8000a1a:	f7ff fdab 	bl	8000574 <number_on>
		HAL_Delay(200);
 8000a1e:	20c8      	movs	r0, #200	; 0xc8
 8000a20:	f000 f864 	bl	8000aec <HAL_Delay>
		number_off();
 8000a24:	f7ff fe88 	bl	8000738 <number_off>
		HAL_Delay(500);
 8000a28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a2c:	f000 f85e 	bl	8000aec <HAL_Delay>

}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f929 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a42:	200f      	movs	r0, #15
 8000a44:	f000 f806 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a48:	f7ff fc4e 	bl	80002e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f935 	bl	8000ce2 <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f90b 	bl	8000caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x1c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_IncTick+0x20>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a03      	ldr	r2, [pc, #12]	; (8000ad4 <HAL_IncTick+0x20>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000028 	.word	0x20000028

08000ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b02      	ldr	r3, [pc, #8]	; (8000ae8 <HAL_GetTick+0x10>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000028 	.word	0x20000028

08000aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af4:	f7ff fff0 	bl	8000ad8 <HAL_GetTick>
 8000af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b04:	d005      	beq.n	8000b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_Delay+0x44>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b12:	bf00      	nop
 8000b14:	f7ff ffe0 	bl	8000ad8 <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d8f7      	bhi.n	8000b14 <HAL_Delay+0x28>
  {
  }
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000008 	.word	0x20000008

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f7ff ff90 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff49 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff5e 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff90 	bl	8000bec <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5f 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ffb0 	bl	8000c50 <SysTick_Config>
 8000cf0:	4603      	mov	r3, r0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e272      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 8087 	beq.w	8000e2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d1c:	4b92      	ldr	r3, [pc, #584]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 030c 	and.w	r3, r3, #12
 8000d24:	2b04      	cmp	r3, #4
 8000d26:	d00c      	beq.n	8000d42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d28:	4b8f      	ldr	r3, [pc, #572]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 030c 	and.w	r3, r3, #12
 8000d30:	2b08      	cmp	r3, #8
 8000d32:	d112      	bne.n	8000d5a <HAL_RCC_OscConfig+0x5e>
 8000d34:	4b8c      	ldr	r3, [pc, #560]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d40:	d10b      	bne.n	8000d5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d42:	4b89      	ldr	r3, [pc, #548]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d06c      	beq.n	8000e28 <HAL_RCC_OscConfig+0x12c>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d168      	bne.n	8000e28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e24c      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d62:	d106      	bne.n	8000d72 <HAL_RCC_OscConfig+0x76>
 8000d64:	4b80      	ldr	r3, [pc, #512]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a7f      	ldr	r2, [pc, #508]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	e02e      	b.n	8000dd0 <HAL_RCC_OscConfig+0xd4>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10c      	bne.n	8000d94 <HAL_RCC_OscConfig+0x98>
 8000d7a:	4b7b      	ldr	r3, [pc, #492]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a7a      	ldr	r2, [pc, #488]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	4b78      	ldr	r3, [pc, #480]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a77      	ldr	r2, [pc, #476]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	e01d      	b.n	8000dd0 <HAL_RCC_OscConfig+0xd4>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d9c:	d10c      	bne.n	8000db8 <HAL_RCC_OscConfig+0xbc>
 8000d9e:	4b72      	ldr	r3, [pc, #456]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a71      	ldr	r2, [pc, #452]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	4b6f      	ldr	r3, [pc, #444]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a6e      	ldr	r2, [pc, #440]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e00b      	b.n	8000dd0 <HAL_RCC_OscConfig+0xd4>
 8000db8:	4b6b      	ldr	r3, [pc, #428]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a6a      	ldr	r2, [pc, #424]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	4b68      	ldr	r3, [pc, #416]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a67      	ldr	r2, [pc, #412]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d013      	beq.n	8000e00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fe7e 	bl	8000ad8 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de0:	f7ff fe7a 	bl	8000ad8 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b64      	cmp	r3, #100	; 0x64
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e200      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df2:	4b5d      	ldr	r3, [pc, #372]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f0      	beq.n	8000de0 <HAL_RCC_OscConfig+0xe4>
 8000dfe:	e014      	b.n	8000e2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e00:	f7ff fe6a 	bl	8000ad8 <HAL_GetTick>
 8000e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e08:	f7ff fe66 	bl	8000ad8 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b64      	cmp	r3, #100	; 0x64
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e1ec      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1a:	4b53      	ldr	r3, [pc, #332]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f0      	bne.n	8000e08 <HAL_RCC_OscConfig+0x10c>
 8000e26:	e000      	b.n	8000e2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d063      	beq.n	8000efe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e36:	4b4c      	ldr	r3, [pc, #304]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 030c 	and.w	r3, r3, #12
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00b      	beq.n	8000e5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e42:	4b49      	ldr	r3, [pc, #292]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	2b08      	cmp	r3, #8
 8000e4c:	d11c      	bne.n	8000e88 <HAL_RCC_OscConfig+0x18c>
 8000e4e:	4b46      	ldr	r3, [pc, #280]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d116      	bne.n	8000e88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5a:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d005      	beq.n	8000e72 <HAL_RCC_OscConfig+0x176>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d001      	beq.n	8000e72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e1c0      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e72:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	4939      	ldr	r1, [pc, #228]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	4313      	orrs	r3, r2
 8000e84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e86:	e03a      	b.n	8000efe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d020      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e90:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <HAL_RCC_OscConfig+0x270>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e96:	f7ff fe1f 	bl	8000ad8 <HAL_GetTick>
 8000e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9c:	e008      	b.n	8000eb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e9e:	f7ff fe1b 	bl	8000ad8 <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e1a1      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f0      	beq.n	8000e9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	4927      	ldr	r1, [pc, #156]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	600b      	str	r3, [r1, #0]
 8000ed0:	e015      	b.n	8000efe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <HAL_RCC_OscConfig+0x270>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fdfe 	bl	8000ad8 <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ee0:	f7ff fdfa 	bl	8000ad8 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e180      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f0      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d03a      	beq.n	8000f80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d019      	beq.n	8000f46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f18:	f7ff fdde 	bl	8000ad8 <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f20:	f7ff fdda 	bl	8000ad8 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e160      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f0      	beq.n	8000f20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f000 fa78 	bl	8001434 <RCC_Delay>
 8000f44:	e01c      	b.n	8000f80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4c:	f7ff fdc4 	bl	8000ad8 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f52:	e00f      	b.n	8000f74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f54:	f7ff fdc0 	bl	8000ad8 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d908      	bls.n	8000f74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e146      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	42420000 	.word	0x42420000
 8000f70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f74:	4b92      	ldr	r3, [pc, #584]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1e9      	bne.n	8000f54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 80a6 	beq.w	80010da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f92:	4b8b      	ldr	r3, [pc, #556]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10d      	bne.n	8000fba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4b88      	ldr	r3, [pc, #544]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a87      	ldr	r2, [pc, #540]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b85      	ldr	r3, [pc, #532]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fba:	4b82      	ldr	r3, [pc, #520]	; (80011c4 <HAL_RCC_OscConfig+0x4c8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d118      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fc6:	4b7f      	ldr	r3, [pc, #508]	; (80011c4 <HAL_RCC_OscConfig+0x4c8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a7e      	ldr	r2, [pc, #504]	; (80011c4 <HAL_RCC_OscConfig+0x4c8>)
 8000fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fd2:	f7ff fd81 	bl	8000ad8 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fda:	f7ff fd7d 	bl	8000ad8 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b64      	cmp	r3, #100	; 0x64
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e103      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fec:	4b75      	ldr	r3, [pc, #468]	; (80011c4 <HAL_RCC_OscConfig+0x4c8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0f0      	beq.n	8000fda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d106      	bne.n	800100e <HAL_RCC_OscConfig+0x312>
 8001000:	4b6f      	ldr	r3, [pc, #444]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	4a6e      	ldr	r2, [pc, #440]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6213      	str	r3, [r2, #32]
 800100c:	e02d      	b.n	800106a <HAL_RCC_OscConfig+0x36e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x334>
 8001016:	4b6a      	ldr	r3, [pc, #424]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4a69      	ldr	r2, [pc, #420]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	6213      	str	r3, [r2, #32]
 8001022:	4b67      	ldr	r3, [pc, #412]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a66      	ldr	r2, [pc, #408]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	f023 0304 	bic.w	r3, r3, #4
 800102c:	6213      	str	r3, [r2, #32]
 800102e:	e01c      	b.n	800106a <HAL_RCC_OscConfig+0x36e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	2b05      	cmp	r3, #5
 8001036:	d10c      	bne.n	8001052 <HAL_RCC_OscConfig+0x356>
 8001038:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	4a60      	ldr	r2, [pc, #384]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	6213      	str	r3, [r2, #32]
 8001044:	4b5e      	ldr	r3, [pc, #376]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	4a5d      	ldr	r2, [pc, #372]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6213      	str	r3, [r2, #32]
 8001050:	e00b      	b.n	800106a <HAL_RCC_OscConfig+0x36e>
 8001052:	4b5b      	ldr	r3, [pc, #364]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	4a5a      	ldr	r2, [pc, #360]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	f023 0301 	bic.w	r3, r3, #1
 800105c:	6213      	str	r3, [r2, #32]
 800105e:	4b58      	ldr	r3, [pc, #352]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	4a57      	ldr	r2, [pc, #348]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001064:	f023 0304 	bic.w	r3, r3, #4
 8001068:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d015      	beq.n	800109e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001072:	f7ff fd31 	bl	8000ad8 <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001078:	e00a      	b.n	8001090 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107a:	f7ff fd2d 	bl	8000ad8 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	f241 3288 	movw	r2, #5000	; 0x1388
 8001088:	4293      	cmp	r3, r2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e0b1      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001090:	4b4b      	ldr	r3, [pc, #300]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0ee      	beq.n	800107a <HAL_RCC_OscConfig+0x37e>
 800109c:	e014      	b.n	80010c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109e:	f7ff fd1b 	bl	8000ad8 <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a4:	e00a      	b.n	80010bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a6:	f7ff fd17 	bl	8000ad8 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e09b      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010bc:	4b40      	ldr	r3, [pc, #256]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1ee      	bne.n	80010a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d105      	bne.n	80010da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ce:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a3b      	ldr	r2, [pc, #236]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 8087 	beq.w	80011f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010e4:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 030c 	and.w	r3, r3, #12
 80010ec:	2b08      	cmp	r3, #8
 80010ee:	d061      	beq.n	80011b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d146      	bne.n	8001186 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f8:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <HAL_RCC_OscConfig+0x4cc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fe:	f7ff fceb 	bl	8000ad8 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001106:	f7ff fce7 	bl	8000ad8 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e06d      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001118:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f0      	bne.n	8001106 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112c:	d108      	bne.n	8001140 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800112e:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001132:	f023 020f 	bic.w	r2, r3, #15
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	4921      	ldr	r1, [pc, #132]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	4313      	orrs	r3, r2
 800113e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a19      	ldr	r1, [r3, #32]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	430b      	orrs	r3, r1
 8001152:	491b      	ldr	r1, [pc, #108]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	4313      	orrs	r3, r2
 8001156:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_RCC_OscConfig+0x4cc>)
 800115a:	2201      	movs	r2, #1
 800115c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115e:	f7ff fcbb 	bl	8000ad8 <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001166:	f7ff fcb7 	bl	8000ad8 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e03d      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f0      	beq.n	8001166 <HAL_RCC_OscConfig+0x46a>
 8001184:	e035      	b.n	80011f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_RCC_OscConfig+0x4cc>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fca4 	bl	8000ad8 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001194:	f7ff fca0 	bl	8000ad8 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e026      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0x498>
 80011b2:	e01e      	b.n	80011f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d107      	bne.n	80011cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e019      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40007000 	.word	0x40007000
 80011c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_RCC_OscConfig+0x500>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d106      	bne.n	80011ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d001      	beq.n	80011f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e0a0      	b.n	8001356 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d020      	beq.n	8001262 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800122c:	4b4c      	ldr	r3, [pc, #304]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	4a4b      	ldr	r2, [pc, #300]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 8001232:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001236:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001244:	4b46      	ldr	r3, [pc, #280]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	4a45      	ldr	r2, [pc, #276]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 800124a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800124e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001250:	4b43      	ldr	r3, [pc, #268]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4940      	ldr	r1, [pc, #256]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 800125e:	4313      	orrs	r3, r2
 8001260:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d040      	beq.n	80012f0 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d107      	bne.n	8001286 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d115      	bne.n	80012ae <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e067      	b.n	8001356 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d107      	bne.n	800129e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800128e:	4b34      	ldr	r3, [pc, #208]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d109      	bne.n	80012ae <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e05b      	b.n	8001356 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129e:	4b30      	ldr	r3, [pc, #192]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e053      	b.n	8001356 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ae:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f023 0203 	bic.w	r2, r3, #3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	4929      	ldr	r1, [pc, #164]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c0:	f7ff fc0a 	bl	8000ad8 <HAL_GetTick>
 80012c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c6:	e00a      	b.n	80012de <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c8:	f7ff fc06 	bl	8000ad8 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e03b      	b.n	8001356 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 020c 	and.w	r2, r3, #12
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d1eb      	bne.n	80012c8 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d008      	beq.n	800130e <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	4915      	ldr	r1, [pc, #84]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 800130a:	4313      	orrs	r3, r2
 800130c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d009      	beq.n	800132e <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	490d      	ldr	r1, [pc, #52]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 800132a:	4313      	orrs	r3, r2
 800132c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800132e:	f000 f81f 	bl	8001370 <HAL_RCC_GetSysClockFreq>
 8001332:	4602      	mov	r2, r0
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_RCC_ClockConfig+0x160>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	091b      	lsrs	r3, r3, #4
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	4909      	ldr	r1, [pc, #36]	; (8001364 <HAL_RCC_ClockConfig+0x164>)
 8001340:	5ccb      	ldrb	r3, [r1, r3]
 8001342:	fa22 f303 	lsr.w	r3, r2, r3
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_RCC_ClockConfig+0x168>)
 8001348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_RCC_ClockConfig+0x16c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fb80 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	08001500 	.word	0x08001500
 8001368:	20000000 	.word	0x20000000
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001370:	b490      	push	{r4, r7}
 8001372:	b08e      	sub	sp, #56	; 0x38
 8001374:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001376:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001378:	f107 0414 	add.w	r4, r7, #20
 800137c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800137e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001382:	4b28      	ldr	r3, [pc, #160]	; (8001424 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001384:	1d3c      	adds	r4, r7, #4
 8001386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001388:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
 8001394:	2300      	movs	r3, #0
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a8:	f003 030c 	and.w	r3, r3, #12
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d002      	beq.n	80013b6 <HAL_RCC_GetSysClockFreq+0x46>
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d003      	beq.n	80013bc <HAL_RCC_GetSysClockFreq+0x4c>
 80013b4:	e02a      	b.n	800140c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_RCC_GetSysClockFreq+0xbc>)
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013ba:	e02a      	b.n	8001412 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013be:	0c9b      	lsrs	r3, r3, #18
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	3338      	adds	r3, #56	; 0x38
 80013c6:	443b      	add	r3, r7
 80013c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d011      	beq.n	80013fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	f003 030f 	and.w	r3, r3, #15
 80013e0:	3338      	adds	r3, #56	; 0x38
 80013e2:	443b      	add	r3, r7
 80013e4:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	4a0f      	ldr	r2, [pc, #60]	; (800142c <HAL_RCC_GetSysClockFreq+0xbc>)
 80013ee:	fb03 f202 	mul.w	r2, r3, r2
 80013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
 80013fa:	e004      	b.n	8001406 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8001406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800140a:	e002      	b.n	8001412 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_RCC_GetSysClockFreq+0xbc>)
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001414:	4618      	mov	r0, r3
 8001416:	3738      	adds	r7, #56	; 0x38
 8001418:	46bd      	mov	sp, r7
 800141a:	bc90      	pop	{r4, r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	080014e0 	.word	0x080014e0
 8001424:	080014f0 	.word	0x080014f0
 8001428:	40021000 	.word	0x40021000
 800142c:	007a1200 	.word	0x007a1200
 8001430:	003d0900 	.word	0x003d0900

08001434 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <RCC_Delay+0x34>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0a      	ldr	r2, [pc, #40]	; (800146c <RCC_Delay+0x38>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	0a5b      	lsrs	r3, r3, #9
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	fb02 f303 	mul.w	r3, r2, r3
 800144e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001450:	bf00      	nop
  }
  while (Delay --);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1e5a      	subs	r2, r3, #1
 8001456:	60fa      	str	r2, [r7, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f9      	bne.n	8001450 <RCC_Delay+0x1c>
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	20000000 	.word	0x20000000
 800146c:	10624dd3 	.word	0x10624dd3

08001470 <__libc_init_array>:
 8001470:	b570      	push	{r4, r5, r6, lr}
 8001472:	2600      	movs	r6, #0
 8001474:	4d0c      	ldr	r5, [pc, #48]	; (80014a8 <__libc_init_array+0x38>)
 8001476:	4c0d      	ldr	r4, [pc, #52]	; (80014ac <__libc_init_array+0x3c>)
 8001478:	1b64      	subs	r4, r4, r5
 800147a:	10a4      	asrs	r4, r4, #2
 800147c:	42a6      	cmp	r6, r4
 800147e:	d109      	bne.n	8001494 <__libc_init_array+0x24>
 8001480:	f000 f822 	bl	80014c8 <_init>
 8001484:	2600      	movs	r6, #0
 8001486:	4d0a      	ldr	r5, [pc, #40]	; (80014b0 <__libc_init_array+0x40>)
 8001488:	4c0a      	ldr	r4, [pc, #40]	; (80014b4 <__libc_init_array+0x44>)
 800148a:	1b64      	subs	r4, r4, r5
 800148c:	10a4      	asrs	r4, r4, #2
 800148e:	42a6      	cmp	r6, r4
 8001490:	d105      	bne.n	800149e <__libc_init_array+0x2e>
 8001492:	bd70      	pop	{r4, r5, r6, pc}
 8001494:	f855 3b04 	ldr.w	r3, [r5], #4
 8001498:	4798      	blx	r3
 800149a:	3601      	adds	r6, #1
 800149c:	e7ee      	b.n	800147c <__libc_init_array+0xc>
 800149e:	f855 3b04 	ldr.w	r3, [r5], #4
 80014a2:	4798      	blx	r3
 80014a4:	3601      	adds	r6, #1
 80014a6:	e7f2      	b.n	800148e <__libc_init_array+0x1e>
 80014a8:	08001510 	.word	0x08001510
 80014ac:	08001510 	.word	0x08001510
 80014b0:	08001510 	.word	0x08001510
 80014b4:	08001514 	.word	0x08001514

080014b8 <memset>:
 80014b8:	4603      	mov	r3, r0
 80014ba:	4402      	add	r2, r0
 80014bc:	4293      	cmp	r3, r2
 80014be:	d100      	bne.n	80014c2 <memset+0xa>
 80014c0:	4770      	bx	lr
 80014c2:	f803 1b01 	strb.w	r1, [r3], #1
 80014c6:	e7f9      	b.n	80014bc <memset+0x4>

080014c8 <_init>:
 80014c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ca:	bf00      	nop
 80014cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ce:	bc08      	pop	{r3}
 80014d0:	469e      	mov	lr, r3
 80014d2:	4770      	bx	lr

080014d4 <_fini>:
 80014d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014d6:	bf00      	nop
 80014d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014da:	bc08      	pop	{r3}
 80014dc:	469e      	mov	lr, r3
 80014de:	4770      	bx	lr
